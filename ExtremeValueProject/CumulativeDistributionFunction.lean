/-
Copyright (c) 2025 Kalle Kyt√∂l√§. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kalle Kyt√∂l√§, ...
-/
import Mathlib.MeasureTheory.Measure.Portmanteau



section cdf_def

open MeasureTheory Topology Filter Set ENNReal NNReal

/-- The c.d.f. of a finite measure on ‚Ñù. -/
private def MeasureTheory.FiniteMeasure.cdf' (Œº : FiniteMeasure ‚Ñù) : ‚Ñù ‚Üí ‚Ñù := fun x ‚Ü¶ Œº (Iic x)

/-- The c.d.f. of a finite measure on ‚Ñù is an increasing function. -/
private lemma MeasureTheory.FiniteMeasure.monotone_cdf' (Œº : FiniteMeasure ‚Ñù) :
    Monotone Œº.cdf' :=
  fun _ _ h ‚Ü¶ apply_mono _ (Iic_subset_Iic.mpr h)

/-- The c.d.f. of a measure on ‚Ñù is a right continuous function. -/
private lemma _root_.MeasureTheory.Measure.right_continuous_cdf'
    (Œº : Measure ‚Ñù) (x : ‚Ñù) (h_ex_fin : ‚àÉ (y : ‚Ñù), x < y ‚àß Œº (Iic y) ‚â† ‚àû) :
    ContinuousWithinAt (fun z ‚Ü¶ Œº (Iic z)) (Ici x) x := by
  have obs_Inter : Iic x = ‚ãÇ (y : ‚Ñù) (_ : y > x), Iic y := by
    refine subset_antisymm ?_ ?_
    ¬∑ simpa using fun _ hy ‚Ü¶ Iic_subset_Iic.mpr hy.le
    ¬∑ intro y hy
      simp only [gt_iff_lt, mem_iInter, mem_Iic] at hy
      exact le_of_forall_gt_imp_ge_of_dense hy
  have mbles : ‚àÄ y, x < y ‚Üí NullMeasurableSet (Iic y) Œº :=
    fun y _ ‚Ü¶ (measurableSet_Iic).nullMeasurableSet
  have key := tendsto_measure_biInter_gt mbles (fun y z _ hyz ‚Ü¶ Iic_subset_Iic.mpr hyz) h_ex_fin
  simp_rw [‚Üê obs_Inter] at key
  intro V hV
  obtain ‚ü®y, x_lt_y, Ioo_x_y_subset‚ü© : ‚àÉ u, x < u ‚àß Ioo x u ‚äÜ ‚áëŒº ‚àò Iic ‚Åª¬π' V := by
    simpa [mem_nhdsGT_iff_exists_Ioo_subset] using key hV
  simp only [mem_nhdsGE_iff_exists_Ico_subset, mem_map, mem_Ioi, exists_prop]
  refine ‚ü®y, ‚ü®x_lt_y, ?_‚ü©‚ü©
  intros z hz
  by_cases h: x = z
  ¬∑ simp only [‚Üêh, mem_preimage, mem_of_mem_nhds hV]
  ¬∑ exact Ioo_x_y_subset <| show z ‚àà Ioo x y from ‚ü®lt_of_le_of_ne hz.1 h, hz.2‚ü©

#check FiniteMeasure.self_eq_mass_mul_normalize
-- TODO: The @[simp] -tag in `FiniteMeasure.self_eq_mass_mul_normalize` is very bad.

/-- The c.d.f. of a finite measure on ‚Ñù is a right continuous function. -/
private lemma MeasureTheory.FiniteMeasure.right_continuous_cdf'
    (Œº : FiniteMeasure ‚Ñù) (x : ‚Ñù) :
    ContinuousWithinAt (fun z ‚Ü¶ Œº (Iic z)) (Ici x) x := by
  have key := MeasureTheory.Measure.right_continuous_cdf' Œº x ?_
  swap
  ¬∑ exact ‚ü®x + 1, ‚ü®by linarith, measure_ne_top (‚ÜëŒº) (Iic (x + 1))‚ü©‚ü©
  apply ContinuousWithinAt.comp (Œ≤ := ‚Ñù‚â•0‚àû)
    (f := fun z ‚Ü¶ Œº (Iic z)) (g := ENNReal.toNNReal) (t := {u | u ‚â† ‚àû})
  ¬∑ apply ENNReal.continuousOn_toNNReal
    simpa only [ennreal_mass] using coe_ne_top
  ¬∑ simpa only [FiniteMeasure.ennreal_coeFn_eq_coeFn_toMeasure] using key
  ¬∑ simp only [FiniteMeasure.ennreal_coeFn_eq_coeFn_toMeasure]
    intro z _
    simp

private lemma MeasureTheory.FiniteMeasure.right_continuous_cdf
    (Œº : FiniteMeasure ‚Ñù) (x : ‚Ñù) :
    ContinuousWithinAt (fun z ‚Ü¶ (Œº (Iic z) : ‚Ñù)) (Ici x) x := by
  have key := Œº.right_continuous_cdf' x
  apply ContinuousWithinAt.comp (Œ≥ := ‚Ñù)
    (f := fun z ‚Ü¶ Œº (Iic z)) (g := fun p ‚Ü¶ p) (t := univ) ?_ key ?_
  ¬∑ exact Continuous.continuousWithinAt NNReal.continuous_coe
  ¬∑ intro z _
    simp

/-- The cumulative distribution function of a finite measure on ‚Ñù. -/
def MeasureTheory.FiniteMeasure.cdf (Œº : FiniteMeasure ‚Ñù) : StieltjesFunction where
  toFun := fun x ‚Ü¶ Œº (Iic x)
  mono' := fun _ _ h ‚Ü¶ apply_mono _ (Iic_subset_Iic.mpr h)
  right_continuous' := MeasureTheory.FiniteMeasure.right_continuous_cdf Œº

/-- The type of cumulative distribution functions of Borel probability measures on ‚Ñù. -/
@[ext] structure CumulativeDistributionFunction extends StieltjesFunction where
  tendsto_atTop : Tendsto toFun atTop (ùìù (1 : ‚Ñù))
  tendsto_atBot : Tendsto toFun atBot (ùìù (0 : ‚Ñù))

namespace CumulativeDistributionFunction

instance : Coe CumulativeDistributionFunction StieltjesFunction where
  coe := CumulativeDistributionFunction.toStieltjesFunction

instance : CoeFun CumulativeDistributionFunction (fun _ ‚Ü¶ ‚Ñù ‚Üí ‚Ñù) where
  coe F := F.toFun

lemma apply_nonneg (F : CumulativeDistributionFunction) (x : ‚Ñù) :
    0 ‚â§ F x := by
  exact F.mono'.le_of_tendsto F.tendsto_atBot x

lemma apply_le_one (F : CumulativeDistributionFunction) (x : ‚Ñù) :
    F x ‚â§ 1 := by
  exact F.mono'.ge_of_tendsto F.tendsto_atTop x

lemma apply_eq_measure_Iic (F : CumulativeDistributionFunction) (x : ‚Ñù) :
    F x = ENNReal.toReal (F.measure (Iic x)) := by
  simp only [StieltjesFunction.measure_Iic F F.tendsto_atBot x, sub_zero,
             ENNReal.toReal_ofReal (F.apply_nonneg x)]

/-- The cumulative distribution function of a probability measure on ‚Ñù. -/
def _root_.MeasureTheory.ProbabilityMeasure.cdf (Œº : ProbabilityMeasure ‚Ñù) : CumulativeDistributionFunction where
  toFun := Œº.toFiniteMeasure.cdf
  mono' := StieltjesFunction.mono (FiniteMeasure.cdf Œº.toFiniteMeasure)
  right_continuous' := StieltjesFunction.right_continuous' (FiniteMeasure.cdf Œº.toFiniteMeasure)
  tendsto_atTop := sorry -- **Issue #10**
  tendsto_atBot := sorry -- **Issue #10**

lemma _root_.MeasureTheory.ProbabilityMeasure.cdf_apply_eq (Œº : ProbabilityMeasure ‚Ñù) (x : ‚Ñù) :
    Œº.cdf x = Œº (Iic x) := by rfl

lemma _root_.MeasureTheory.ProbabilityMeasure.cdf_toStieltjesFunction_apply_eq (Œº : ProbabilityMeasure ‚Ñù) (x : ‚Ñù) :
    Œº.cdf.toStieltjesFunction x = Œº (Iic x) := by rfl

instance isProbabilityMeasure_measure_coe (F : CumulativeDistributionFunction) :
    IsProbabilityMeasure F.measure := by
  constructor
  rw [@StieltjesFunction.measure_univ F 0 1 F.tendsto_atBot F.tendsto_atTop]
  simp only [sub_zero, ofReal_one]

/-- The measure associated to the cdf of a probability measure is the same probability measure. -/
lemma _root_.MeasureTheory.ProbabilityMeasure.measure_cdf (Œº : ProbabilityMeasure ‚Ñù) :
    (Œº.cdf : StieltjesFunction).measure = Œº := by
  refine Measure.ext_of_Iic (Œº.cdf : StieltjesFunction).measure Œº (fun x ‚Ü¶ ?_)
  simp only [StieltjesFunction.measure_Iic _ (ProbabilityMeasure.cdf Œº).tendsto_atBot,
    Œº.cdf_toStieltjesFunction_apply_eq x, sub_zero, ofReal_coe_nnreal, ne_eq,
    ProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure]

/-- A bijective correspondence between `CumulativeDistributionFunction`s and Borel
`ProbabilityMeasure`s on ‚Ñù. -/
noncomputable def equiv_probabilityMeasure :
    CumulativeDistributionFunction ‚âÉ ProbabilityMeasure ‚Ñù where
  toFun := fun F ‚Ü¶ ‚ü®F.measure, by infer_instance‚ü©
  invFun := fun Œº ‚Ü¶ Œº.cdf
  left_inv := by
    intro F
    ext x
    simp [F.apply_eq_measure_Iic x, ProbabilityMeasure.cdf_toStieltjesFunction_apply_eq]
    rfl
  right_inv := by
    intro Œº
    apply Subtype.ext
    apply Œº.measure_cdf

/-- The Borel probability measure on ‚Ñù defined by a cumulative distribution function. -/
noncomputable def probabilityMeasure (F : CumulativeDistributionFunction) :=
    equiv_probabilityMeasure F

@[simp] lemma probabilityMeasure_cdf_eq_self (F : CumulativeDistributionFunction) :
    F.probabilityMeasure.cdf = F := by
  change equiv_probabilityMeasure.symm (equiv_probabilityMeasure F) = F
  simp

@[simp] lemma _root_.MeasureTheory.ProbabilityMeasure.cdf_probabilityMeasure_eq_self
    (Œº : ProbabilityMeasure ‚Ñù) :
    Œº.cdf.probabilityMeasure = Œº := by
  change equiv_probabilityMeasure (equiv_probabilityMeasure.symm Œº) = Œº
  simp

lemma continuousAt_iff (F : CumulativeDistributionFunction) (x : ‚Ñù) :
    ContinuousAt F x ‚Üî F.measure {x} = 0 := by
  rw [StieltjesFunction.measure_singleton]
  rw [Monotone.continuousAt_iff_leftLim_eq_rightLim F.mono']
  sorry -- **Issue #11**

/-- Lemma 4.7 (cdf-convergence-from-convergence-in-distribution) in blueprint:
Convergence in distribution of a sequence of Borel probability measures on `‚Ñù` implies that the
corresponding c.d.f.s converge pointwise at all continuity points of the limit c.d.f. -/
lemma tendsto_apply_of_tendsto_of_continuousAt {Œπ : Type*} {L : Filter Œπ}
    {Œºs : Œπ ‚Üí ProbabilityMeasure ‚Ñù} {Œº : ProbabilityMeasure ‚Ñù} (weak_lim : Tendsto Œºs L (ùìù Œº))
    {x : ‚Ñù} (cont : ContinuousAt Œº.cdf x) :
    Tendsto (fun i ‚Ü¶ (Œºs i).cdf x) L (ùìù (Œº.cdf x)) := by
  convert (NNReal.continuous_coe.tendsto _).comp <|
    ProbabilityMeasure.tendsto_measure_of_null_frontier_of_tendsto weak_lim ?_
  simp only [nonempty_Ioi, frontier_Iic']
  have aux := (Œº.cdf.continuousAt_iff x).mp cont
  rw [ProbabilityMeasure.measure_cdf Œº] at aux
  exact (ProbabilityMeasure.null_iff_toMeasure_null Œº {x}).mpr aux

lemma eq_of_forall_apply_eq_const_mul (F G : CumulativeDistributionFunction)
    (c : ‚Ñù) (h : ‚àÄ x, F x = c * G x) :
    F = G := by
  sorry -- TODO: Create an issue?

lemma eq_of_forall_dense_eq {S : Set ‚Ñù} (S_dense : Dense S) (F G : CumulativeDistributionFunction)
    (h : ‚àÄ x ‚àà S, F x = G x) :
    F = G := by
  sorry -- **Issue #52**

end CumulativeDistributionFunction

end cdf_def
