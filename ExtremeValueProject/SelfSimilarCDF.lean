/-
Copyright (c) 2025 Kalle Kyt√∂l√§. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kalle Kyt√∂l√§, ...
-/
import Mathlib
import ExtremeValueProject.OneParameterAffine
import ExtremeValueProject.OrderContinuity
import ExtremeValueProject.ExtremeValueDistribution

section self_similar_cdf

noncomputable def CumulativeDistributionFunction.comp_rightOrdContinuous
    (F : CumulativeDistributionFunction) (œÜ : ‚Ñù ‚Üí ‚Ñù) (hœÜ : RightOrdContinuous œÜ)
    (hœÜ0 : œÜ 0 = 0) (hœÜ0 : œÜ 1 = 1) :
    CumulativeDistributionFunction where
  toFun x := œÜ (F x)
  mono' := by sorry
  right_continuous' := by sorry
  tendsto_atTop := by sorry
  tendsto_atBot := by sorry

open Set Topology in
lemma Real.rightOrdContinuous_indicator_Ici_rpow {t : ‚Ñù} (t_nn : 0 < t) :
    RightOrdContinuous (indicator (Ici 0) (fun p ‚Ü¶ Real.rpow p t)) := by
  -- This is a bad proof. Should just prove continuity.
  refine Monotone.rightOrdContinuous_of_forall_continuousWithinAt_Ici ?_ ?_
  ¬∑ intro p‚ÇÅ p‚ÇÇ hp
    by_cases nn‚ÇÅ : 0 ‚â§ p‚ÇÅ
    ¬∑ simpa [show p‚ÇÅ ‚àà Ici 0 from nn‚ÇÅ, show p‚ÇÇ ‚àà Ici 0 from nn‚ÇÅ.trans hp]
        using rpow_le_rpow nn‚ÇÅ hp t_nn.le
    ¬∑ have hp‚ÇÅ : ¬¨ p‚ÇÅ ‚àà Ici 0 := nn‚ÇÅ
      by_cases nn‚ÇÇ : 0 ‚â§ p‚ÇÇ
      ¬∑ simpa [hp‚ÇÅ, show p‚ÇÇ ‚àà Ici 0 from nn‚ÇÇ] using rpow_nonneg nn‚ÇÇ t
      ¬∑ simp [hp‚ÇÅ, show ¬¨ p‚ÇÇ ‚àà Ici 0 from nn‚ÇÇ]
  ¬∑ intro p
    by_cases p_nn : 0 ‚â§ p
    ¬∑ apply ContinuousWithinAt.congr (f := fun q ‚Ü¶ Real.rpow q t)
      ¬∑ exact (continuous_rpow_const t_nn.le).continuousWithinAt
      ¬∑ intro y hy
        simp [p_nn.trans hy]
      ¬∑ simp [p_nn]
    ¬∑ apply ContinuousWithinAt.congr_of_eventuallyEq (f := 0)
      ¬∑ exact continuous_const.continuousWithinAt
      ¬∑ have nhd : Iio 0 ‚àà ùìù[‚â•] p :=
          mem_nhdsGE_iff_exists_Ico_subset.mpr ‚ü®0, lt_of_not_ge p_nn, Ico_subset_Iio_self‚ü©
        filter_upwards [nhd] with y hy
        simp [show ¬¨ y ‚àà Ici 0 from not_mem_Ici.mpr hy]
      ¬∑ simp [p_nn]

noncomputable def CumulativeDistributionFunction.pow
    (F : CumulativeDistributionFunction) {t : ‚Ñù} (t_pos : 0 < t) :
    CumulativeDistributionFunction :=
  F.comp_rightOrdContinuous _ (Real.rightOrdContinuous_indicator_Ici_rpow t_pos)
    (by simpa using Real.zero_rpow t_pos.ne.symm) (by simp)

lemma CumulativeDistributionFunction.pow_apply_eq
    (F : CumulativeDistributionFunction) {t : ‚Ñù} (t_pos : 0 < t) (x : ‚Ñù) :
    F.pow t_pos x = (F x) ^ t := by
  simp [pow, comp_rightOrdContinuous, show ¬¨ F x < 0 by simpa using apply_nonneg F x]

lemma CumulativeDistributionFunction.npow_apply_eq
    (F : CumulativeDistributionFunction) {n : ‚Ñï} (n_pos : 0 < n) (x : ‚Ñù) :
    F.pow (show 0 < (n : ‚Ñù) from Nat.cast_pos'.mpr n_pos) x = (F x) ^ n := by
  simp [pow, comp_rightOrdContinuous, show ¬¨ F x < 0 by simpa using apply_nonneg F x]

@[simp] lemma CumulativeDistributionFunction.smul_pow_eq_pow_smul
    (F : CumulativeDistributionFunction) (A : AffineIncrEquiv) {t : ‚Ñù} (t_pos : 0 < t) :
    A ‚Ä¢ (F.pow t_pos) = (A ‚Ä¢ F).pow t_pos := by
  ext x
  simp only [mulAction_apply_eq, pow_apply_eq]

open Filter Topology in
lemma continuous_parameter_ev_limit_relation
    {F G : CumulativeDistributionFunction} {As : ‚Ñï ‚Üí AffineIncrEquiv} {x : ‚Ñù}
    (hAF : Tendsto (fun n ‚Ü¶ ((As n) ‚Ä¢ F) x) atTop (ùìù (G x))) {t : ‚Ñù} (t_pos : 0 < t) :
    Tendsto (fun n ‚Ü¶ ((As n) ‚Ä¢ F).pow
        (t := 1 ‚äî Nat.floor (n * t)) (lt_max_of_lt_left zero_lt_one) x)
      atTop (ùìù (G.pow t_pos x)) := by
  sorry -- **Issue #57** (continuous-parameter-ev-limit)

open Real

lemma CumulativeDistributionFunction.conjugate_smul_self_eq (G : CumulativeDistributionFunction)
    {F : CumulativeDistributionFunction} {A : AffineIncrEquiv} (hAG : A ‚Ä¢ G = F)
    (B : AffineIncrEquiv) :
    (B * A * B‚Åª¬π) ‚Ä¢ (B ‚Ä¢ G) = B ‚Ä¢ F := by
  ext x
  rw [‚Üê congr_fun (f := fun x ‚Ü¶ ((B * A * B‚Åª¬π) ‚Ä¢ (B ‚Ä¢ G)) x) (g := fun x ‚Ü¶ (B ‚Ä¢ F) x) ?_ x]
  simp only [show B ‚Ä¢ F = (B * A) ‚Ä¢ G by simp only [mul_smul, hAG],
             ‚Üê mul_smul, mul_assoc, inv_mul_cancel, mul_one]

open AffineIncrEquiv in
lemma CumulativeDistributionFunction.selfSimilar_index_zero_transform
    (G : CumulativeDistributionFunction) {Œ≤ s : ‚Ñù} (Œ≤_pos : 0 < Œ≤)
    (hG : (homOfIndex‚ÇÄ Œ≤ s) ‚Ä¢ G = G.pow (exp_pos s)) :
    (homOfIndex‚ÇÄ 1 s) ‚Ä¢ ((mkOfCoefs (Right.inv_pos.mpr Œ≤_pos) 0) ‚Ä¢ G)
      = ((mkOfCoefs (Right.inv_pos.mpr Œ≤_pos) 0) ‚Ä¢ G).pow (exp_pos s) := by
  have obs := ((mkOfCoefs (Right.inv_pos.mpr Œ≤_pos) 0)).conjugate_homOfIndex‚ÇÄ Œ≤ s
  simp only [coefs_fst_mkOfCoefs, mul_inv_cancel‚ÇÄ Œ≤_pos.ne.symm] at obs
  rw [‚Üê smul_pow_eq_pow_smul, ‚Üê hG, ‚Üê obs]
  simp [‚Üê mul_smul]

open AffineIncrEquiv in
lemma gumbel_type_of_selfSimilar_index_zero'' {G : CumulativeDistributionFunction}
    (G_nondeg : ¬¨ G.IsDegenerate) (hG : ‚àÄ s, (homOfIndex‚ÇÄ 1 s) ‚Ä¢ G = G.pow (exp_pos s)) (x : ‚Ñù) :
    G x = exp (-(exp (-x + log (- (log (G 0)))))) := by
  sorry

open AffineIncrEquiv in
lemma gumbel_type_of_selfSimilar_index_zero' {G : CumulativeDistributionFunction}
    (G_nondeg : ¬¨ G.IsDegenerate) {Œ≤ : ‚Ñù} (Œ≤_pos : 0 < Œ≤)
    (hG : ‚àÄ s, (homOfIndex‚ÇÄ Œ≤ s) ‚Ä¢ G = G.pow (exp_pos s)) :
    ‚àÄ x, G x = exp (-(exp (-Œ≤‚Åª¬π * x + log (- (log (G 0)))))) := by
  sorry

open AffineIncrEquiv in
theorem gumbel_type_of_selfSimilar_index_zero
    {G : CumulativeDistributionFunction} (G_nondeg : ¬¨ G.IsDegenerate) {Œ≤ : ‚Ñù} (Œ≤_pos : 0 < Œ≤)
    (hG : ‚àÄ s, (homOfIndex‚ÇÄ Œ≤ s) ‚Ä¢ G = G.pow (exp_pos s)) :
    G = (mkOfCoefs (Right.inv_pos.mpr Œ≤_pos) (-(log (- (log (G 0))))))‚Åª¬π ‚Ä¢ standardGumbelCDF := by
  ext x
  rw [gumbel_type_of_selfSimilar_index_zero' G_nondeg Œ≤_pos hG]
  simp only [CumulativeDistributionFunction.mulAction_apply_eq, inv_inv, apply_eq,
             coefs_fst_mkOfCoefs, one_mul, coefs_snd_mkOfCoefs]
  rw [standardGumbelCDF_apply_eq]
  simp only [neg_mul, log_neg_eq_log, neg_add_rev, neg_neg, exp_eq_exp, neg_inj]
  ring

open AffineIncrEquiv Topology Filter in
lemma apply_eq_zero_of_lt_of_selfSimilar_index_pos' {G : CumulativeDistributionFunction}
    {Œ± c : ‚Ñù} (Œ±_pos : 0 < Œ±) (hG : ‚àÄ s, (homOfIndex Œ± c s) ‚Ä¢ G = G.pow (exp_pos s))
    {x : ‚Ñù} (hx : x < c) :
    G x = 0 := by
  have Gx_eq : (G x) ^ 2 = G x := by
    have Gx_sq : (homOfIndex Œ± c (Real.log 2) ‚Ä¢ G) x = (G x) ^ 2 := by
      rw [‚Üê CumulativeDistributionFunction.npow_apply_eq G zero_lt_two x, hG (Real.log 2)]
      congr
      simpa only [Nat.cast_ofNat] using exp_log zero_lt_two
    have obs : (homOfIndex Œ± c (Real.log 2))‚Åª¬π x > x := by
      simp only [homOfIndex_inv, apply_eq, homOfIndex_coefs_fst, neg_mul, homOfIndex_coefs_snd]
      have aux_pos : 0 < rexp (-(log 2 * Œ±)) := exp_pos _
      have aux_lt_one : rexp (-(log 2 * Œ±)) < 1 := by
        simpa only [exp_lt_one_iff, Left.neg_neg_iff] using mul_pos (log_pos one_lt_two) Œ±_pos
      linarith [show (c - x) * (1 - rexp (-(log 2 * Œ±))) > 0
                from mul_pos (by linarith) (by linarith)]
    apply le_antisymm
    ¬∑ exact pow_le_of_le_one (G.apply_nonneg x) (G.apply_le_one x) two_ne_zero
    ¬∑ simpa only [‚Üê Gx_sq] using G.mono obs.le
  have Gx_eq_01 : G x = 0 ‚à® G x = 1 := by
    rw [‚Üê sub_eq_zero (b := (1 : ‚Ñù)), ‚Üê mul_eq_zero]
    linarith
  cases' Gx_eq_01 with h0 h1
  ¬∑ exact h0 -- This what actually happens.
  -- The other case leads to a contradiction.
  exfalso
  have Gx_pow (s) : (homOfIndex Œ± c s ‚Ä¢ G) x = Real.rpow (G x) (Real.exp s) := by
    simp only [rpow_eq_pow, ‚Üê CumulativeDistributionFunction.pow_apply_eq G (exp_pos s) x, hG s]
  have but : Tendsto (fun s ‚Ü¶ (homOfIndex Œ± c s)‚Åª¬π x) atBot atBot := by
    have same_but : Tendsto (fun s ‚Ü¶ Real.exp (-(s * Œ±)) * (x - c) + c) atBot atBot := by
      apply tendsto_atBot_add_const_right atBot c
      apply (tendsto_mul_const_atBot_of_neg (show x - c < 0 by linarith)).mpr
      apply tendsto_exp_atTop.comp
      simp only [tendsto_neg_atTop_iff]
      exact (tendsto_mul_const_atBot_of_pos Œ±_pos).mpr tendsto_id
    convert same_but using 1
    ext s
    simp only [homOfIndex_inv, apply_eq, homOfIndex_coefs_fst, neg_mul, homOfIndex_coefs_snd]
    ring
  have oops (s) : G ((homOfIndex Œ± c s)‚Åª¬π x) = 1 := by
    change (homOfIndex Œ± c s ‚Ä¢ G) x = 1
    rw [Gx_pow s] -- (Keep this as a separate step to avoid risk of unwanted simping.)
    simp [h1]
  have well := (G.tendsto_atBot).comp but
  apply zero_lt_one.ne
    (tendsto_nhds_unique (Tendsto.congr (f‚ÇÇ := fun _ ‚Ü¶ 1) ?_ well) tendsto_const_nhds)
  intro s
  dsimp
  rw [‚Üê CumulativeDistributionFunction.mulAction_apply_eq, Gx_pow] -- (Avoid unwanted simping.)
  simp [h1]

open AffineIncrEquiv in
lemma frechet_scale_pos_of_selfSimilar_index_pos' {G : CumulativeDistributionFunction}
    (G_nondeg : ¬¨ G.IsDegenerate) {Œ± c : ‚Ñù} (Œ±_pos : 0 < Œ±)
    (hG : ‚àÄ s, (homOfIndex Œ± c s) ‚Ä¢ G = G.pow (exp_pos s)) :
    0 < (-(log (G (c + 1)))) ^ Œ± := by
  apply rpow_pos_of_pos
  simp only [Left.neg_pos_iff]
  apply log_neg
  -- Both G(c+1)=0 and G(c+1)=1 lead to a contradiction with the nondegeneracy of G,
  -- like in the proof of `apply_eq_zero_of_lt_of_selfSimilar_index_pos'`.
  ¬∑ sorry
  ¬∑ sorry

open AffineIncrEquiv in
lemma frechet_type_of_selfSimilar_index_pos' {G : CumulativeDistributionFunction}
    (G_nondeg : ¬¨ G.IsDegenerate) {Œ± c : ‚Ñù} (Œ±_pos : 0 < Œ±)
    (hG : ‚àÄ s, (homOfIndex Œ± c s) ‚Ä¢ G = G.pow (exp_pos s)) {x : ‚Ñù} (hx : c < x) :
    G x = exp (-(((x - c) / ((-(log (G (c + 1)))) ^ Œ±)) ^ (-Œ±‚Åª¬π))) := by
  sorry

open AffineIncrEquiv in
theorem frechet_type_of_selfSimilar_index_pos
    {G : CumulativeDistributionFunction} (G_nondeg : ¬¨ G.IsDegenerate) {Œ± c : ‚Ñù} (Œ±_pos : 0 < Œ±)
    (hG : ‚àÄ s, (homOfIndex Œ± c s) ‚Ä¢ G = G.pow (exp_pos s)) :
    G = (mkOfCoefs (frechet_scale_pos_of_selfSimilar_index_pos' G_nondeg Œ±_pos hG) c)
        ‚Ä¢ standardFrechetCDF (Right.inv_pos.mpr Œ±_pos) := by
  have scale_pos := frechet_scale_pos_of_selfSimilar_index_pos' G_nondeg Œ±_pos hG
  have scale_inv_pos : 0 < ((-log (G (c + 1))) ^ Œ±)‚Åª¬π := Right.inv_pos.mpr scale_pos
  set A := (mkOfCoefs (frechet_scale_pos_of_selfSimilar_index_pos' G_nondeg Œ±_pos hG) c) with def_A
  apply CumulativeDistributionFunction.eq_of_forall_dense_eq (dense_compl_singleton c)
  intro x x_ne_c
  by_cases hxc : x < c
  ¬∑ rw [apply_eq_zero_of_lt_of_selfSimilar_index_pos' Œ±_pos hG hxc]
    have Ainv_x_neg : A‚Åª¬π x < 0 := by
      simp only [def_A, apply_eq, inv_coefs_fst, coefs_fst_mkOfCoefs, inv_coefs_snd,
                 coefs_snd_mkOfCoefs, neg_mul, add_neg_lt_iff_lt_add, zero_add]
      exact (mul_lt_mul_iff_of_pos_left scale_inv_pos).mpr hxc
    simp only [CumulativeDistributionFunction.mulAction_apply_eq]
    rw [standardFrechetCDF_apply_nonpos_eq]
    exact Ainv_x_neg.le
  ¬∑ have hxc' : c < x := lt_of_le_of_ne (not_lt.mp hxc) fun h ‚Ü¶ x_ne_c h.symm
    rw [frechet_type_of_selfSimilar_index_pos' G_nondeg Œ±_pos hG hxc']
    have Ainv_x_pos : 0 < A‚Åª¬π x := by
      simp only [def_A, apply_eq, inv_coefs_fst, coefs_fst_mkOfCoefs, inv_coefs_snd,
                 coefs_snd_mkOfCoefs, neg_mul, lt_add_neg_iff_add_lt, zero_add]
      exact (mul_lt_mul_iff_of_pos_left scale_inv_pos).mpr hxc'
    simp only [CumulativeDistributionFunction.mulAction_apply_eq]
    rw [standardFrechetCDF_apply_pos_eq _ Ainv_x_pos]
    simp only [def_A, apply_eq, inv_coefs_fst, coefs_fst_mkOfCoefs, inv_coefs_snd,
               coefs_snd_mkOfCoefs, neg_mul, rpow_eq_pow, exp_eq_exp, neg_inj]
    congr
    ring

open AffineIncrEquiv Topology Filter in
lemma apply_eq_one_of_gt_of_selfSimilar_index_neg' {G : CumulativeDistributionFunction}
    {Œ± c : ‚Ñù} (Œ±_neg : Œ± < 0) (hG : ‚àÄ s, (homOfIndex Œ± c s) ‚Ä¢ G = G.pow (exp_pos s))
    {x : ‚Ñù} (hx : c < x) :
    G x = 1 := by
  -- (Compare with the proof of `apply_eq_zero_of_lt_of_selfSimilar_index_pos'`.)
  sorry -- **Issue ?**

open AffineIncrEquiv in
lemma weibull_scale_pos_of_selfSimilar_index_neg' {G : CumulativeDistributionFunction}
    (G_nondeg : ¬¨ G.IsDegenerate) {Œ± c : ‚Ñù} (Œ±_neg : Œ± < 0)
    (hG : ‚àÄ s, (homOfIndex Œ± c s) ‚Ä¢ G = G.pow (exp_pos s)) :
    0 < (-(log (G (c - 1)))) ^ (-Œ±) := by
  apply rpow_pos_of_pos
  simp only [Left.neg_pos_iff]
  apply log_neg
  -- Both G(c-1)=0 and G(c-1)=1 lead to a contradiction with the nondegeneracy of G,
  -- like in the proof of `apply_eq_zero_of_lt_of_selfSimilar_index_pos'`.
  ¬∑ sorry
  ¬∑ sorry

open AffineIncrEquiv in
lemma weibull_type_of_selfSimilar_index_neg' {G : CumulativeDistributionFunction}
    (G_nondeg : ¬¨ G.IsDegenerate) {Œ± c : ‚Ñù} (Œ±_neg : Œ± < 0)
    (hG : ‚àÄ s, (homOfIndex Œ± c s) ‚Ä¢ G = G.pow (exp_pos s)) {x : ‚Ñù} (hx : x ‚â§ c) :
    G x = exp (-(((c - x) / ((-(log (G (c - 1)))) ^ Œ±)) ^ (-Œ±‚Åª¬π))) := by
  sorry

example (Œæ : ‚Ñù) (hŒæ : Œæ < 0) : 0 < -Œæ‚Åª¬π := by simp [hŒæ]

open AffineIncrEquiv in
theorem weibull_type_of_selfSimilar_index_neg
    {G : CumulativeDistributionFunction} (G_nondeg : ¬¨ G.IsDegenerate) {Œ± c : ‚Ñù} (Œ±_neg : Œ± < 0)
    (hG : ‚àÄ s, (homOfIndex Œ± c s) ‚Ä¢ G = G.pow (exp_pos s)) :
    G = (mkOfCoefs (weibull_scale_pos_of_selfSimilar_index_neg' G_nondeg Œ±_neg hG) c)
        ‚Ä¢ standardWeibullCDF (show 0 < -Œ±‚Åª¬π by simp [Œ±_neg]) := by
  sorry

end self_similar_cdf


section self_simiarity_of_extreme_value_distributions

open Real

namespace CumulativeDistributionFunction.IsExtremeValueDistr

theorem self_similar {G : CumulativeDistributionFunction}
    (G_evd : G.IsExtremeValueDistr) :
    ‚àÉ (f : Multiplicative ‚Ñù ‚Üí* AffineIncrEquiv), f ‚â† 1 ‚àß Measurable f ‚àß
      (‚àÄ (s : ‚Ñù), f s ‚Ä¢ G = G.pow (exp_pos s)) := by
  sorry

open AffineIncrEquiv in
/-- **Fisher-Tippett-Gnedenko theorem**:
Any extreme value distribution is of Gumbel, Fr√©chet, or Weibull type.
-/
theorem classification {G : CumulativeDistributionFunction}
    (G_evd : G.IsExtremeValueDistr) :
    (‚àÉ (A : AffineIncrEquiv), A ‚Ä¢ G = standardGumbelCDF) ‚à®
      (‚àÉ (A : AffineIncrEquiv) (Œæ : ‚Ñù) (hŒæ : 0 < Œæ) , A ‚Ä¢ G = standardFrechetCDF hŒæ) ‚à®
      (‚àÉ (A : AffineIncrEquiv) (Œæ : ‚Ñù) (hŒæ : 0 < Œæ) , A ‚Ä¢ G = standardWeibullCDF hŒæ) := by
  obtain ‚ü®f, f_nontriv, f_mble, hf‚ü© := IsExtremeValueDistr.self_similar G_evd
  cases' homomorphism_from_Real_characterization_of_nontrivial f_nontriv f_mble with h‚ÇÄ h‚ÇÅ
  ¬∑ left -- **the Gumbel case**
    obtain ‚ü®Œ≤, Œ≤_ne_zero, hŒ≤‚ü© := h‚ÇÄ
    have Œ≤_pos : 0 < Œ≤ := by
      by_contra con -- Œ≤ ‚â§ 0 is a contradiction with the self-similarity property and nondegeneracy
      simp only [not_lt] at con
      have Œ≤_neg : Œ≤ < 0 := lt_of_le_of_ne con Œ≤_ne_zero
      obtain ‚ü®x, hx‚ü© : ‚àÉ x, G x ‚â† 0 ‚àß G x ‚â† 1 := by simpa [IsDegenerate] using G_evd.nondegenerate
      have Gx_eq : (G x) ^ 2 = G x := by
        have Gx_sq : (homOfIndex‚ÇÄ Œ≤ (Real.log 2) ‚Ä¢ G) x = (G x) ^ 2 := by
          have selfsim := hŒ≤ ‚ñ∏ hf
          rw [‚Üê CumulativeDistributionFunction.npow_apply_eq G zero_lt_two x, selfsim (log 2)]
          congr
          simpa only [Nat.cast_ofNat] using exp_log zero_lt_two
        have obs : (homOfIndex‚ÇÄ Œ≤ (Real.log 2))‚Åª¬π x > x := by
          simp [show Real.log 2 * Œ≤ < 0 from mul_neg_of_pos_of_neg (log_pos one_lt_two) Œ≤_neg]
        apply le_antisymm
        ¬∑ exact pow_le_of_le_one (G.apply_nonneg x) (G.apply_le_one x) two_ne_zero
        ¬∑ simpa only [‚Üê Gx_sq] using G.mono obs.le
      have Gx_eq_01 : G x = 0 ‚à® G x = 1 := by
        rw [‚Üê sub_eq_zero (b := (1 : ‚Ñù)), ‚Üê mul_eq_zero]
        linarith
      cases' Gx_eq_01 with hGx‚ÇÄ hGx‚ÇÅ
      ¬∑ exact hx.1 hGx‚ÇÄ
      ¬∑ exact hx.2 hGx‚ÇÅ
    have key := gumbel_type_of_selfSimilar_index_zero G_evd.nondegenerate Œ≤_pos (hŒ≤ ‚ñ∏ hf)
    set A := (mkOfCoefs (Right.inv_pos.mpr Œ≤_pos) (-(log (- (log (G 0))))))
      with def_A
    refine ‚ü®A, ?_‚ü©
    simpa using congr_arg (fun F ‚Ü¶ A ‚Ä¢ F) key
  ¬∑ right -- Fr√©chet or Weibull case
    obtain ‚ü®Œ±, c, Œ±_ne_zero, h‚ü© := h‚ÇÅ
    by_cases sign_Œ± : 0 < Œ±
    ¬∑ left -- **the Fr√©chet case**
      have key := frechet_type_of_selfSimilar_index_pos G_evd.nondegenerate sign_Œ± (h ‚ñ∏ hf)
      set A := (mkOfCoefs
          (frechet_scale_pos_of_selfSimilar_index_pos' G_evd.nondegenerate sign_Œ± (h ‚ñ∏ hf)) c)
        with def_A
      refine ‚ü®A‚Åª¬π, Œ±‚Åª¬π, by simp [sign_Œ±], ?_‚ü©
      simpa [‚Üê mul_smul] using congr_arg (fun F ‚Ü¶ A‚Åª¬π ‚Ä¢ F) key
    ¬∑ right -- **the Weibull case**
      have Œ±_neg : Œ± < 0 := lt_of_le_of_ne (not_lt.mp sign_Œ±) Œ±_ne_zero
      have key := weibull_type_of_selfSimilar_index_neg G_evd.nondegenerate Œ±_neg (h ‚ñ∏ hf)
      set A := (mkOfCoefs
          (weibull_scale_pos_of_selfSimilar_index_neg' G_evd.nondegenerate Œ±_neg (h ‚ñ∏ hf)) c)
        with def_A
      refine ‚ü®A‚Åª¬π, -Œ±‚Åª¬π, by simp [Œ±_neg], ?_‚ü©
      simpa [‚Üê mul_smul] using congr_arg (fun F ‚Ü¶ A‚Åª¬π ‚Ä¢ F) key

end CumulativeDistributionFunction.IsExtremeValueDistr

end self_simiarity_of_extreme_value_distributions
