/-
Copyright (c) 2025 Kalle Kyt√∂l√§. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kalle Kyt√∂l√§, ...
-/
import ExtremeValueProject.CumulativeDistributionFunction
import ExtremeValueProject.AffineTransformation
import Mathlib

section weak_convergence_cdf

open Filter Topology NNReal ENNReal Set

/-- Lemma 4.3 (cdf-tight) in blueprint. -/
lemma CumulativeDistributionFunction.forall_pos_exists_lt_gt_continuousAt
    (F : CumulativeDistributionFunction) {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ) :
    ‚àÉ (a b : ‚Ñù), a < b ‚àß F a < Œµ ‚àß 1 - Œµ < F b ‚àß ContinuousAt F a ‚àß ContinuousAt F b := by
  sorry -- **Issue #16**

/-- Lemma 4.4 (subdivision-dense) in blueprint:
An interval `[a,b]` can be subdivided with points from a dense set so that the consecutive
differences are smaller than a given `Œ¥ > 0`. -/
lemma forall_exists_subdivision_diff_lt_of_dense {D : Set ‚Ñù} (D_dense : Dense D)
    {a b : ‚Ñù} (ha : a ‚àà D) (hb : b ‚àà D) (a_lt_b : a < b) {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) :
    ‚àÉ (k : ‚Ñï) (cs : Fin (k + 1) ‚Üí ‚Ñù),
      (cs 0 = a) ‚àß (cs (Fin.last _) = b) ‚àß (Monotone cs) ‚àß (‚àÄ k, cs k ‚àà D) ‚àß
      (‚àÄ (j : Fin k), cs j.succ - cs j < Œ¥) := by
  sorry -- **Issue #22**

/-- Lemma 4.5 (continuous-function-approximation-subdivision) in blueprint:
An interval `[a,b]` can be subdivided with points from a dense set so that for a given
continuous function `f` the function values on the parts of the subdivision are smaller than
a given `Œµ > 0`. -/
lemma forall_exists_subdivision_dist_apply_lt_of_dense_of_continuous {D : Set ‚Ñù} (D_dense : Dense D)
    {f : ‚Ñù ‚Üí ‚Ñù} (f_cont : Continuous f) {a b : ‚Ñù} (ha : a ‚àà D) (hb : b ‚àà D) (a_lt_b : a < b)
    {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ) :
    ‚àÉ (k : ‚Ñï) (cs : Fin (k + 1) ‚Üí ‚Ñù),
      (cs 0 = a) ‚àß (cs (Fin.last _) = b) ‚àß (Monotone cs) ‚àß (‚àÄ k, cs k ‚àà D) ‚àß
      (‚àÄ (j : Fin k), ‚àÄ x ‚àà Icc (cs j) (cs j.succ), ‚àÄ y ‚àà Icc (cs j) (cs j.succ),
        dist (f x) (f y) < Œµ) := by
  sorry -- **Issue #17**

/-- Preliminary to Lemma 4.6 (simple-integral-cdf-difference) in blueprint. -/
lemma CumulativeDistributionFunction.integral_indicator_eq (F : CumulativeDistributionFunction)
    {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
    {Œ∫ : Type*} {s : Finset Œ∫} {a b : ‚Ñù} (a_le_b : a ‚â§ b) (Œ± : E) :
    ‚à´ x, (indicator (Ioc a b) (fun _ ‚Ü¶ Œ±)) x ‚àÇ F.measure =
      (F b - F a) ‚Ä¢ Œ± := by
  sorry -- **Issue #19**

/-- Lemma 4.6 (simple-integral-cdf-difference) in blueprint. -/
lemma CumulativeDistributionFunction.integral_sum_indicator_eq (F : CumulativeDistributionFunction)
    {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
    {Œ∫ : Type*} {s : Finset Œ∫} (as : Œ∫ ‚Üí ‚Ñù) (bs : Œ∫ ‚Üí ‚Ñù) (h : ‚àÄ j, as j ‚â§ bs j) (Œ± : Œ∫ ‚Üí E) :
    ‚à´ x, ((‚àë j ‚àà s, indicator (Ioc (as j) (bs j)) (fun _ ‚Ü¶ Œ± j)) x) ‚àÇ F.measure =
      ‚àë j in s, (F (bs j) - F (as j)) ‚Ä¢ Œ± j := by
  -- It may be worthwhile to think about an improved phrasing of this.
  -- The previous lemma `CumulativeDistributionFunction.integral_indicator_eq` should be
  -- the key anyway.
  sorry -- **Issue #18**

open MeasureTheory Topology

/-- Theorem 4.8 (convergence-in-distribution-with-cdf) in blueprint:
Convergence of a sequence of c.d.f.s pointwise at all continuity points of the limit c.d.f. imply
convergence in distribution of the corresponding Borel probability measures on `‚Ñù`. -/
theorem tendsto_of_forall_continuousAt_tendsto_cdf
    (Œºs : ‚Ñï ‚Üí ProbabilityMeasure ‚Ñù) (Œº : ProbabilityMeasure ‚Ñù)
    (h : ‚àÄ x, ContinuousAt Œº.cdf x ‚Üí Tendsto (fun n ‚Ü¶ (Œºs n).cdf x) atTop (ùìù (Œº.cdf x))) :
    Tendsto Œºs atTop (ùìù Œº) := by
  sorry -- **Issue #20** (a big one)

end weak_convergence_cdf



section levy_prokhorov_metric

open MeasureTheory Filter Topology

variable (F G :CumulativeDistributionFunction)

namespace CumulativeDistributionFunction

lemma tendsto_probabilityMeasure_iff_forall_continuousAt_tendsto
    (Fs : ‚Ñï ‚Üí CumulativeDistributionFunction) (G : CumulativeDistributionFunction) :
    Tendsto (fun i ‚Ü¶ (Fs i).probabilityMeasure) atTop (ùìù G.probabilityMeasure)
      ‚Üî ‚àÄ x, ContinuousAt G x ‚Üí Tendsto (fun i ‚Ü¶ Fs i x) atTop (ùìù (G x)) := by
  constructor
  ¬∑ intro h x hGx
    have key := @tendsto_apply_of_tendsto_of_continuousAt ‚Ñï atTop
                (fun i ‚Ü¶ (Fs i).probabilityMeasure) G.probabilityMeasure h x
    simp_all
  ¬∑ intro h
    apply tendsto_of_forall_continuousAt_tendsto_cdf
    simpa using h

noncomputable def equiv_levyProkhorov :
    CumulativeDistributionFunction ‚âÉ LevyProkhorov (ProbabilityMeasure ‚Ñù) :=
  equiv_probabilityMeasure.trans (LevyProkhorov.equiv (ProbabilityMeasure ‚Ñù)).symm

noncomputable instance : MetricSpace CumulativeDistributionFunction := by
  apply MetricSpace.induced equiv_levyProkhorov
  ¬∑ intro F G h
    simpa only [EmbeddingLike.apply_eq_iff_eq] using h
  ¬∑ exact levyProkhorovDist_metricSpace_probabilityMeasure

noncomputable def homeomorph_levyProkhorov :
    CumulativeDistributionFunction ‚âÉ‚Çú LevyProkhorov (ProbabilityMeasure ‚Ñù) :=
  Equiv.toHomeomorphOfIsInducing equiv_levyProkhorov ‚ü®rfl‚ü©

noncomputable def homeomorph_probabilityMeasure :
    CumulativeDistributionFunction ‚âÉ‚Çú ProbabilityMeasure ‚Ñù :=
  homeomorph_levyProkhorov.trans homeomorph_probabilityMeasure_levyProkhorov.symm

lemma homeomorph_probabilityMeasure_apply_eq (F : CumulativeDistributionFunction) :
    homeomorph_probabilityMeasure F = F.probabilityMeasure :=
  rfl

/-- The standard characterization of convergence of cumulative distribution functions. -/
lemma tendsto_iff_forall_continuousAt_tendsto
    (Fs : ‚Ñï ‚Üí CumulativeDistributionFunction) (G : CumulativeDistributionFunction) :
    Tendsto Fs atTop (ùìù G) ‚Üî
      ‚àÄ x, ContinuousAt G x ‚Üí Tendsto (fun i ‚Ü¶ Fs i x) atTop (ùìù (G x)) := by
  rw [‚Üê tendsto_probabilityMeasure_iff_forall_continuousAt_tendsto]
  constructor
  ¬∑ intro h
    simp_rw [‚Üê homeomorph_probabilityMeasure_apply_eq]
    apply homeomorph_probabilityMeasure.continuous.continuousAt.tendsto.comp h
  ¬∑ intro h
    convert homeomorph_probabilityMeasure.symm.continuous.continuousAt.tendsto.comp h
    ¬∑ ext1 i
      exact EquivLike.inv_apply_eq_iff_eq_apply.mp rfl
    ¬∑ exact EquivLike.inv_apply_eq_iff_eq_apply.mp rfl

end CumulativeDistributionFunction

end levy_prokhorov_metric



section continuous_mulAction

namespace CumulativeDistributionFunction

lemma continuous_mulAction :
    Continuous fun (‚ü®A, F‚ü© : AffineIncrEquiv √ó CumulativeDistributionFunction) ‚Ü¶ A ‚Ä¢ F := by
  rw [continuous_iff_seqContinuous]
  intro AFs BG h_lim
  rw [tendsto_iff_forall_continuousAt_tendsto]
  intro x hBGx
  simp only [Function.comp_apply, mulAction_apply_eq]
  sorry -- **Issue #54** (action-on-cdf-continuous)

end CumulativeDistributionFunction

end continuous_mulAction
