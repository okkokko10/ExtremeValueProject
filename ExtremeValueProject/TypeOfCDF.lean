/-
Copyright (c) 2025 Kalle Kyt√∂l√§. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kalle Kyt√∂l√§, ...
-/
import Mathlib
import ExtremeValueProject.CumulativeDistributionFunction
import ExtremeValueProject.AffineTransformation


section preliminaries_for_type_of_cdf

open Topology Filter

open scoped Topology


/-- Construct an orientation preserving affine isomorphism `x ‚Ü¶ a * x + b` of `‚Ñù` from
coefficients `a > 0` and `b ‚àà ‚Ñù`. -/
noncomputable def orientationPreservingAffineEquiv.mkOfCoefs {a : ‚Ñù} (a_pos : 0 < a) (b : ‚Ñù) :
    orientationPreservingAffineEquiv where
  val := AffineEquiv.mkOfCoefs_of_field a_pos.ne.symm b
  property := by
    change (AffineEquiv.mkOfCoefs_of_field a_pos.ne.symm b).IsOrientationPreserving
    rw [AffineEquiv.IsOrientationPreserving]
    convert a_pos
    simp

lemma orientationPreservingAffineEquiv.mkOfCoefs_apply {a : ‚Ñù} (a_pos : 0 < a) (b : ‚Ñù) (x : ‚Ñù) :
    (mkOfCoefs a_pos b).val x = a * x + b :=
  rfl

lemma orientationPreservingAffineEquiv.mkOfCoefs_val {a : ‚Ñù} (a_pos : 0 < a) (b : ‚Ñù) (x : ‚Ñù) :
    (mkOfCoefs a_pos b).val = AffineEquiv.mkOfCoefs_of_field a_pos.ne.symm b :=
  rfl

namespace CumulativeDistributionFunction

lemma exists‚ÇÇ_continuousAt_of_not_isDegenerate
    (F : CumulativeDistributionFunction) (hF : ¬¨ F.IsDegenerate) :
    ‚àÉ x‚ÇÅ x‚ÇÇ, (x‚ÇÅ < x‚ÇÇ) ‚àß (0 < F x‚ÇÅ) ‚àß (F x‚ÇÇ < 1) ‚àß (ContinuousAt F x‚ÇÅ) ‚àß (ContinuousAt F x‚ÇÇ) := by
  sorry -- **Issue #38**

lemma unique_orientationPreservingAffineEquiv_smul_eq_not_isDegenerate
    {F G : CumulativeDistributionFunction} {A‚ÇÅ A‚ÇÇ : orientationPreservingAffineEquiv}
    (hG : ¬¨ G.IsDegenerate) (h‚ÇÅ : A‚ÇÅ ‚Ä¢ F = G) (h‚ÇÇ : A‚ÇÇ ‚Ä¢ F = G) :
    A‚ÇÅ = A‚ÇÇ := by
  sorry -- **Issue #39**

open orientationPreservingAffineEquiv in
/-- If we have c.d.f. convergence `F‚Çô ‚Üí G` and `A‚Çô ‚Ä¢ F‚Çô ‚Üí G'`, where `A‚Çô(x) = a‚Çô * x + b‚Çô`
with `a‚Çô ‚Üí 0` and `b‚Çô ‚Üí Œ≤`, then `G'(x) = 0` for all `x < Œ≤`. -/
lemma apply_eq_zero_of_tendsto_of_lt
    {F : ‚Ñï ‚Üí CumulativeDistributionFunction} {G G' : CumulativeDistributionFunction}
    {a : ‚Ñï ‚Üí ‚Ñù} (a_pos : ‚àÄ n, 0 < a n) {b : ‚Ñï ‚Üí ‚Ñù} {Œ≤ : ‚Ñù}
    (a_lim : Tendsto a atTop (ùìù 0)) (b_lim : Tendsto b atTop (ùìù Œ≤))
    (F_lim : ‚àÄ x, ContinuousAt G x ‚Üí Tendsto (fun n ‚Ü¶ F n x) atTop (ùìù (G x)))
    (F_lim' : ‚àÄ x, ContinuousAt G' x ‚Üí
      Tendsto (fun n ‚Ü¶ ((mkOfCoefs (a_pos n) (b n)) ‚Ä¢ (F n)) x) atTop (ùìù (G' x)))
    {x : ‚Ñù} (x_lt : x < Œ≤) :
    G x = 0 := by
  sorry

open orientationPreservingAffineEquiv in
/-- If we have c.d.f. convergence `F‚Çô ‚Üí G` and `A‚Çô ‚Ä¢ F‚Çô ‚Üí G'`, where `A‚Çô(x) = a‚Çô * x + b‚Çô`
with `a‚Çô ‚Üí 0` and `b‚Çô ‚Üí Œ≤`, then `G'(x) = 1` for all `x > Œ≤`. -/
lemma apply_eq_one_of_tendsto_of_gt
    {F : ‚Ñï ‚Üí CumulativeDistributionFunction} {G G' : CumulativeDistributionFunction}
    {a : ‚Ñï ‚Üí ‚Ñù} (a_pos : ‚àÄ n, 0 < a n) {b : ‚Ñï ‚Üí ‚Ñù} {Œ≤ : ‚Ñù}
    (a_lim : Tendsto a atTop (ùìù 0)) (b_lim : Tendsto b atTop (ùìù Œ≤))
    (F_lim : ‚àÄ x, ContinuousAt G x ‚Üí Tendsto (fun n ‚Ü¶ F n x) atTop (ùìù (G x)))
    (F_lim' : ‚àÄ x, ContinuousAt G' x ‚Üí
      Tendsto (fun n ‚Ü¶ ((mkOfCoefs (a_pos n) (b n)) ‚Ä¢ (F n)) x) atTop (ùìù (G' x)))
    {x : ‚Ñù} (x_gt : Œ≤ < x) :
    G x = 1 := by
  sorry

open orientationPreservingAffineEquiv in
/-- If we have c.d.f. convergence `F‚Çô ‚Üí G` and `A‚Çô ‚Ä¢ F‚Çô ‚Üí G'`, where `A‚Çô(x) = a‚Çô * x + b‚Çô`
with `a‚Çô ‚Üí 0` and `b‚Çô ‚Üí Œ≤`, then `G'` is degenerate (a delta mass at `Œ≤`). -/
lemma isDegenerate_of_tendsto_shrinking
    {F : ‚Ñï ‚Üí CumulativeDistributionFunction} {G G' : CumulativeDistributionFunction}
    {a : ‚Ñï ‚Üí ‚Ñù} (a_pos : ‚àÄ n, 0 < a n) {b : ‚Ñï ‚Üí ‚Ñù} {Œ≤ : ‚Ñù}
    (a_lim : Tendsto a atTop (ùìù 0)) (b_lim : Tendsto b atTop (ùìù Œ≤))
    (F_lim : ‚àÄ x, ContinuousAt G x ‚Üí Tendsto (fun n ‚Ü¶ F n x) atTop (ùìù (G x)))
    (F_lim' : ‚àÄ x, ContinuousAt G' x ‚Üí
      Tendsto (fun n ‚Ü¶ ((mkOfCoefs (a_pos n) (b n)) ‚Ä¢ (F n)) x) atTop (ùìù (G' x))) :
    G.IsDegenerate := by
  rw [isDegenerate_iff]
  use Œ≤
  suffices (‚àÄ x < Œ≤, G x = 0) ‚àß (‚àÄ x > Œ≤, G x = 1) by
    funext x
    by_cases x_lt : x < Œ≤
    ¬∑ have obs : ¬¨ x ‚àà Set.Ici Œ≤ := by simpa using x_lt
      simp [obs, this.1 _ x_lt]
    ¬∑ have obs : x ‚àà Set.Ici Œ≤ := by simpa using x_lt
      by_cases x_eq : x = Œ≤
      ¬∑ simp only [obs, Set.indicator_of_mem]
        have key := G.right_continuous
        have key' : ContinuousWithinAt G (Set.Ioi Œ≤) Œ≤ := continuousWithinAt_Ioi_iff_Ici.mpr (key Œ≤)
        have aux : ‚àÄ·∂† x in (ùìù[>] Œ≤), G x = 1 := by
          filter_upwards [self_mem_nhdsWithin] with x hx using this.2 _ hx
        have wow := Tendsto.congr' aux key'
        rw [tendsto_const_nhds_iff] at wow
        rw [x_eq, wow]
      have x_gt : Œ≤ < x := lt_of_le_of_ne (le_of_not_lt x_lt) ((Ne.eq_def _ _).symm ‚ñ∏ x_eq).symm
      simp [obs, this.2 _ x_gt]
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intro x hx
    exact apply_eq_zero_of_tendsto_of_lt a_pos a_lim b_lim F_lim F_lim' hx
  ¬∑ intro x hx
    exact apply_eq_one_of_tendsto_of_gt a_pos a_lim b_lim F_lim F_lim' hx

open orientationPreservingAffineEquiv in
/-- If we have c.d.f. convergence `F‚Çô ‚Üí G` where `G` is nondegenerate and if `A‚Çô`
is a sequence of oriented affine isomorphisms with scaling coefficients `a‚Çô ‚Üí +‚àû`,
then `A‚Çô ‚Ä¢ F‚Çô` cannot converge to any c.d.f. -/
lemma not_tendsto_cdf_of_expanding_of_tendsto_not_isDegenerate
    {F : ‚Ñï ‚Üí CumulativeDistributionFunction} {G G' : CumulativeDistributionFunction}
    (F_lim : ‚àÄ x, ContinuousAt G x ‚Üí Tendsto (fun n ‚Ü¶ F n x) atTop (ùìù (G x)))
    (hG : ¬¨ G.IsDegenerate) {A : ‚Ñï ‚Üí orientationPreservingAffineEquiv}
    (a_lim : Tendsto (fun n ‚Ü¶ (A n).val.toAffineMap.coefs_of_field.1) atTop atTop) :
    ¬¨ ‚àÄ x, ContinuousAt G' x ‚Üí Tendsto (fun n ‚Ü¶ ((A n) ‚Ä¢ (F n)) x) atTop (ùìù (G' x)) := by
  sorry -- **Issue #40**

end CumulativeDistributionFunction

end preliminaries_for_type_of_cdf


section type_of_cdf

end type_of_cdf
